import os
from dotenv import load_dotenv
import google.generativeai as genai
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
model = genai.GenerativeModel("models/gemini-1.5-pro")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    first_name = update.effective_user.first_name.lower()

    if any(name in first_name for name in ["anh", "nam", "minh", "ho√†ng", "quang", "th·∫Øng"]):
        xung_ho = "anh"
    elif any(name in first_name for name in ["linh", "trang", "h·∫±ng", "ng·ªçc", "ph∆∞∆°ng", "nhi"]):
        xung_ho = "ch·ªã"
    else:
        xung_ho = "anh/ch·ªã"

    try:
        response = model.generate_content(
    f"""
    B·∫°n l√† nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng c·ªßa c√¥ng ty.
    Trong m·ªçi c√¢u tr·∫£ l·ªùi, b·∫°n ph·∫£i x∆∞ng l√† 'em' v√† g·ªçi kh√°ch l√† '{xung_ho}'.
    V√≠ d·ª•: 'D·∫° em ch√†o {xung_ho}', 'D·∫° {xung_ho} vui l√≤ng cung c·∫•p th√™m th√¥ng tin', v.v.
    Tuy·ªát ƒë·ªëi kh√¥ng d√πng t·ª´ 't√¥i' ho·∫∑c 'qu√Ω kh√°ch'.
    Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn ch√≠nh s√°ch, b·∫£o h√†nh, ƒë·ªïi tr·∫£, s·∫£n ph·∫©m, ƒë∆°n h√†ng.
    N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan, h√£y l·ªãch s·ª± t·ª´ ch·ªëi.

    C√¢u h·ªèi t·ª´ {xung_ho}: {user_input}
    """
)
        await update.message.reply_text(response.text)
    except Exception as e:
        print("[L·ªñI]:", e)
        await update.message.reply_text("H·ªá th·ªëng g·∫∑p l·ªói. Th·ª≠ l·∫°i sau.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ BOT Gemini 1.5 CSKH ƒëang ch·∫°y... ch·ªù tin nh·∫Øn t·ª´ Telegram")
    app.run_polling()
